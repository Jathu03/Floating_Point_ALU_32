module top_module (
    input wire clk,
    input wire reset,
    input wire [31:0] a,  // Input A (IEEE 754 format)
    input wire [31:0] b,  // Input B (IEEE 754 format)
    input wire [1:0] operation,  // Operation selector: 00->Add, 01->Subtract, 10->Multiply, 11->Divide
    output wire [31:0] result // Result (IEEE 754 format)
);

    // Internal wires to connect the individual operations
    wire [31:0] add_result;
    wire [31:0] sub_result;
    wire [31:0] mul_result;
    wire [31:0] div_result;

    // Instantiate the Floating-Point Adder
    floating_point_adder adder (
        .clk(clk),
        .reset(reset),
        .a(a),
        .b(b),
        .result(add_result)
    );

    // Instantiate the Floating-Point Subtractor
    floating_point_subtractor subtractor (
        .clk(clk),
        .reset(reset),
        .a(a),
        .b(b),
        .result(sub_result)
    );

    // Instantiate the Floating-Point Multiplier
    floating_point_multiplier multiplier (
        .clk(clk),
        .reset(reset),
        .a(a),
        .b(b),
        .result(mul_result)
    );

    // Instantiate the Floating-Point Divider
    floating_point_divider divider (
        .clk(clk),
        .reset(reset),
        .a(a),
        .b(b),
        .result(div_result)
    );

    // MUX to select the appropriate result based on the operation
    always @(posedge clk or posedge reset) begin
        if (reset) begin
            result <= 32'b0;
        end else begin
            case (operation)
                2'b00: result <= add_result;    // Addition
                2'b01: result <= sub_result;    // Subtraction
                2'b10: result <= mul_result;    // Multiplication
                2'b11: result <= div_result;    // Division
                default: result <= 32'b0;
            endcase
        end
    end
endmodule
